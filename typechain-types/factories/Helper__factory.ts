/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Helper, HelperInterface } from "../Helper";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferStarted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "_tokenA",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_tokenB",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "router",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IUniswapV2Pair",
        name: "pair",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "singleAmount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "singleTokenAddLiquidity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "uniswapV2Router",
    outputs: [
      {
        internalType: "contract IUniswapV2Router",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50611de7806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80638da5cb5b116100665780638da5cb5b1461010f578063c0c53b8b1461012d578063e30c397814610149578063f2fde38b14610167578063f3c4469f146101835761009e565b806304ba7f29146100a35780631694505e146100c15780635a5706f5146100df578063715018a6146100fb57806379ba509714610105575b600080fd5b6100ab6101a1565b6040516100b891906110ab565b60405180910390f35b6100c96101c7565b6040516100d69190611125565b60405180910390f35b6100f960048036038101906100f491906111f4565b6101ed565b005b610103610659565b005b61010d61066d565b005b610117610708565b60405161012491906110ab565b60405180910390f35b6101476004803603810190610142919061126f565b610732565b005b610151610936565b60405161015e91906110ab565b60405180910390f35b610181600480360381019061017c91906112c2565b610960565b005b61018b610aba565b60405161019891906110ab565b60405180910390f35b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806102965750606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b6102d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102cc9061134c565b60405180910390fd5b610301606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1630610ae0565b610350333085606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610bd2909392919063ffffffff16565b6000606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146103cf57606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166103f3565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b90506000600285610404919061139b565b90506000600267ffffffffffffffff811115610423576104226113cc565b5b6040519080825280602002602001820160405280156104515781602001602082028036833780820191505090505b5090508681600081518110610469576104686113fb565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082816001815181106104b8576104b76113fb565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338ed17398360018430896040518663ffffffff1660e01b8152600401610556959493929190611532565b6000604051808303816000875af1158015610575573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061059e91906116cb565b50606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e8e33700888585866000808c8c6040518963ffffffff1660e01b815260040161060998979695949392919061174f565b6060604051808303816000875af1158015610628573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064c91906117cd565b5050505050505050505050565b610661610d0b565b61066b6000610d89565b565b603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f490611892565b60405180910390fd5b61070633610d89565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060019054906101000a900460ff161590508080156107635750600160008054906101000a900460ff1660ff16105b80610790575061077230610e4f565b15801561078f5750600160008054906101000a900460ff1660ff16145b5b6107cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c690611924565b60405180910390fd5b60016000806101000a81548160ff021916908360ff160217905550801561080c576001600060016101000a81548160ff0219169083151502179055505b610814610e72565b83606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156109305760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516109279190611982565b60405180910390a15b50505050565b6000603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610968610d0b565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156109d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109cf90611a0f565b60405180910390fd5b80603460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8273ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30846040518363ffffffff1660e01b8152600401610b3c929190611a2f565b602060405180830381865afa158015610b59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7d9190611a58565b14610bce57610bcd817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8473ffffffffffffffffffffffffffffffffffffffff16610ecb9092919063ffffffff16565b5b5050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd868686604051602401610c0693929190611a85565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610c549190611b36565b6000604051808303816000865af19150503d8060008114610c91576040519150601f19603f3d011682016040523d82523d6000602084013e610c96565b606091505b5091509150818015610cc45750600081511480610cc3575080806020019051810190610cc29190611b85565b5b5b610d03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cfa90611bfe565b60405180910390fd5b505050505050565b610d13611001565b73ffffffffffffffffffffffffffffffffffffffff16610d31610708565b73ffffffffffffffffffffffffffffffffffffffff1614610d87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7e90611c6a565b60405180910390fd5b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16610ec1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eb890611cfc565b60405180910390fd5b610ec9611009565b565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b38585604051602401610efd929190611d1c565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610f4b9190611b36565b6000604051808303816000865af19150503d8060008114610f88576040519150601f19603f3d011682016040523d82523d6000602084013e610f8d565b606091505b5091509150818015610fbb5750600081511480610fba575080806020019051810190610fb99190611b85565b5b5b610ffa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff190611d91565b60405180910390fd5b5050505050565b600033905090565b600060019054906101000a900460ff16611058576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104f90611cfc565b60405180910390fd5b611068611063611001565b610d89565b565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110958261106a565b9050919050565b6110a58161108a565b82525050565b60006020820190506110c0600083018461109c565b92915050565b6000819050919050565b60006110eb6110e66110e18461106a565b6110c6565b61106a565b9050919050565b60006110fd826110d0565b9050919050565b600061110f826110f2565b9050919050565b61111f81611104565b82525050565b600060208201905061113a6000830184611116565b92915050565b6000604051905090565b600080fd5b600080fd5b600061115f8261108a565b9050919050565b61116f81611154565b811461117a57600080fd5b50565b60008135905061118c81611166565b92915050565b61119b8161108a565b81146111a657600080fd5b50565b6000813590506111b881611192565b92915050565b6000819050919050565b6111d1816111be565b81146111dc57600080fd5b50565b6000813590506111ee816111c8565b92915050565b600080600080600060a086880312156112105761120f61114a565b5b600061121e8882890161117d565b955050602061122f888289016111a9565b9450506040611240888289016111df565b9350506060611251888289016111a9565b9250506080611262888289016111df565b9150509295509295909350565b6000806000606084860312156112885761128761114a565b5b6000611296868287016111a9565b93505060206112a7868287016111a9565b92505060406112b8868287016111a9565b9150509250925092565b6000602082840312156112d8576112d761114a565b5b60006112e6848285016111a9565b91505092915050565b600082825260208201905092915050565b7f48656c706572203a20696e76616c696420546f6b656e00000000000000000000600082015250565b60006113366016836112ef565b915061134182611300565b602082019050919050565b6000602082019050818103600083015261136581611329565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113a6826111be565b91506113b1836111be565b9250826113c1576113c061136c565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b611433816111be565b82525050565b6000819050919050565b600061145e61145961145484611439565b6110c6565b6111be565b9050919050565b61146e81611443565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6114a98161108a565b82525050565b60006114bb83836114a0565b60208301905092915050565b6000602082019050919050565b60006114df82611474565b6114e9818561147f565b93506114f483611490565b8060005b8381101561152557815161150c88826114af565b9750611517836114c7565b9250506001810190506114f8565b5085935050505092915050565b600060a082019050611547600083018861142a565b6115546020830187611465565b818103604083015261156681866114d4565b9050611575606083018561109c565b611582608083018461142a565b9695505050505050565b600080fd5b6000601f19601f8301169050919050565b6115ab82611591565b810181811067ffffffffffffffff821117156115ca576115c96113cc565b5b80604052505050565b60006115dd611140565b90506115e982826115a2565b919050565b600067ffffffffffffffff821115611609576116086113cc565b5b602082029050602081019050919050565b600080fd5b60008151905061162e816111c8565b92915050565b6000611647611642846115ee565b6115d3565b9050808382526020820190506020840283018581111561166a5761166961161a565b5b835b81811015611693578061167f888261161f565b84526020840193505060208101905061166c565b5050509392505050565b600082601f8301126116b2576116b161158c565b5b81516116c2848260208601611634565b91505092915050565b6000602082840312156116e1576116e061114a565b5b600082015167ffffffffffffffff8111156116ff576116fe61114f565b5b61170b8482850161169d565b91505092915050565b6000819050919050565b600061173961173461172f84611714565b6110c6565b6111be565b9050919050565b6117498161171e565b82525050565b600061010082019050611765600083018b61109c565b611772602083018a61109c565b61177f604083018961142a565b61178c606083018861142a565b6117996080830187611740565b6117a660a0830186611740565b6117b360c083018561109c565b6117c060e083018461142a565b9998505050505050505050565b6000806000606084860312156117e6576117e561114a565b5b60006117f48682870161161f565b93505060206118058682870161161f565b92505060406118168682870161161f565b9150509250925092565b7f4f776e61626c653a206f6e6c792070656e64696e67206f776e65722063616e2060008201527f6163636570740000000000000000000000000000000000000000000000000000602082015250565b600061187c6026836112ef565b915061188782611820565b604082019050919050565b600060208201905081810360008301526118ab8161186f565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b600061190e602e836112ef565b9150611919826118b2565b604082019050919050565b6000602082019050818103600083015261193d81611901565b9050919050565b600060ff82169050919050565b600061196c61196761196284611439565b6110c6565b611944565b9050919050565b61197c81611951565b82525050565b60006020820190506119976000830184611973565b92915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006119f96026836112ef565b9150611a048261199d565b604082019050919050565b60006020820190508181036000830152611a28816119ec565b9050919050565b6000604082019050611a44600083018561109c565b611a51602083018461109c565b9392505050565b600060208284031215611a6e57611a6d61114a565b5b6000611a7c8482850161161f565b91505092915050565b6000606082019050611a9a600083018661109c565b611aa7602083018561109c565b611ab4604083018461142a565b949350505050565b600081519050919050565b600081905092915050565b60005b83811015611af0578082015181840152602081019050611ad5565b83811115611aff576000848401525b50505050565b6000611b1082611abc565b611b1a8185611ac7565b9350611b2a818560208601611ad2565b80840191505092915050565b6000611b428284611b05565b915081905092915050565b60008115159050919050565b611b6281611b4d565b8114611b6d57600080fd5b50565b600081519050611b7f81611b59565b92915050565b600060208284031215611b9b57611b9a61114a565b5b6000611ba984828501611b70565b91505092915050565b7f5361666545524332303a205452414e534645525f46524f4d5f4641494c454400600082015250565b6000611be8601f836112ef565b9150611bf382611bb2565b602082019050919050565b60006020820190508181036000830152611c1781611bdb565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611c546020836112ef565b9150611c5f82611c1e565b602082019050919050565b60006020820190508181036000830152611c8381611c47565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000611ce6602b836112ef565b9150611cf182611c8a565b604082019050919050565b60006020820190508181036000830152611d1581611cd9565b9050919050565b6000604082019050611d31600083018561109c565b611d3e602083018461142a565b9392505050565b7f5361666545524332303a20415050524f56455f4641494c454400000000000000600082015250565b6000611d7b6019836112ef565b9150611d8682611d45565b602082019050919050565b60006020820190508181036000830152611daa81611d6e565b905091905056fea2646970667358221220ccc120ad3164d4b64f18130e5cba752e6b86f69ad4ab0ce25b1f483eb47d274d64736f6c634300080b0033";

type HelperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: HelperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Helper__factory extends ContractFactory {
  constructor(...args: HelperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Helper> {
    return super.deploy(overrides || {}) as Promise<Helper>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Helper {
    return super.attach(address) as Helper;
  }
  override connect(signer: Signer): Helper__factory {
    return super.connect(signer) as Helper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HelperInterface {
    return new utils.Interface(_abi) as HelperInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Helper {
    return new Contract(address, _abi, signerOrProvider) as Helper;
  }
}
